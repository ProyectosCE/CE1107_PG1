
module UART_FSM (
    input  logic clk,
    input  logic rst,
    input  logic uart_rx,
    input  logic [15:0] clk_count,
    input  logic [2:0] bit_index,
    output logic [1:0] state,
    output logic data_ready
);
    logic [1:0] next_state;

    State_Transition state_transition_inst (
        .state(state),
        .uart_rx(uart_rx),
        .clk_count(clk_count),
        .bit_index(bit_index),
        .next_state(next_state)
    );

    state_register state_register_inst (
        .next_state(next_state),
        .clk(clk),
        .rst(rst),
        .current_state(state)
    );

    Output_Logic output_logic_inst (
        .state(state),
        .clk_count(clk_count),
        .data_ready(data_ready)
    );
endmodule

module state_register (
	input  logic [1:0] next_state,
	input  logic clk,
	input  logic rst,
	output logic [1:0] current_state
);
	flip_flop_D ff0 (.D(next_state[0]), .clk(clk), .rst(rst), .Q(current_state[0]));
	flip_flop_D ff1 (.D(next_state[1]), .clk(clk), .rst(rst), .Q(current_state[1]));

endmodule


module State_Transition (
    input  logic [1:0] state,
    input  logic uart_rx,
    input  logic [15:0] clk_count,
    input  logic [2:0] bit_index,
    output logic [1:0] next_state
);

    localparam IDLE  = 2'b00,
               START = 2'b01,
               DATA  = 2'b10,
               STOP  = 2'b11;

    always_comb begin
        case (state)
            IDLE:
                next_state = (uart_rx == 1'b0) ? START : IDLE;

            START:
                if (clk_count == (CLKS_PER_BIT / 2))
                    next_state = (uart_rx == 1'b0) ? DATA : IDLE;
                else
                    next_state = START;

            DATA:
                if (clk_count == CLKS_PER_BIT)
                    next_state = (bit_index == 3'd7) ? STOP : DATA;
                else
                    next_state = DATA;

            STOP:
                next_state = (clk_count == CLKS_PER_BIT) ? IDLE : STOP;

            default:
                next_state = IDLE;
        endcase
    end
endmodule 

module Output_Logic (
    input  logic [1:0] state,
    input  logic [15:0] clk_count,
    output logic data_ready
);

    localparam STOP = 2'b11;

    always_comb begin
        data_ready = (state == STOP && clk_count == CLKS_PER_BIT) ? 1'b1 : 1'b0;
    end
endmodule 